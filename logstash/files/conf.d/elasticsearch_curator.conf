filter {

	if [fileset][module] == "elasticsearch_curator" {

		grok {
			match => { "message" => "(?<timestamp>%{YEAR}-%{MONTHNUM}-%{MONTHDAY} %{HOUR}:?%{MINUTE}(?::?%{SECOND})),%{NUMBER} %{LOGLEVEL:loglevel}      Job completed."}
			match => { "message" => "(?<timestamp>%{YEAR}-%{MONTHNUM}-%{MONTHDAY} %{HOUR}:?%{MINUTE}(?::?%{SECOND})),%{NUMBER} %{LOGLEVEL:loglevel}      %{GREEDYDATA:step}: %{GREEDYDATA:targets}"}
			match => { "message" => "(?<timestamp>%{YEAR}-%{MONTHNUM}-%{MONTHDAY} %{HOUR}:?%{MINUTE}(?::?%{SECOND})),%{NUMBER} %{LOGLEVEL:loglevel}      %{GREEDYDATA:step}: %{INT:action_id:INT}, \"%{WORD:action_name}\": %{GREEDYDATA:others}"}
		}

		if [step] == "Preparing Action ID" {
			aggregate {
				task_id => "%{taskid}"
				code => "map['duration'] = 0"
				map_action => "create"
			}
		}

		if [step] == "Trying Action ID" {
			aggregate {
				task_id => "%{taskid}"
				code => "map['duration'] += event.get('duration')"
				map_action => "update"
			}
		}

		if [step] == "Job completed." {
			aggregate {
				task_id => "%{taskid}"
				code => "event.set('duration', map['duration'])"
				map_action => "update"
				end_of_task => true
				timeout => 120
			}

		}

		date {
			match  => ["timestamp", "dd/MMM/yyyy:HH:mm:ss Z"]
			target => "@timestamp"
		}

		mutate {
			remove_field => [ "message","timestamp" ]
			add_field => { "parsed" => "OK" }
		}
	}
}
